[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "biocode"
version = "0.1.0"
description = "Living Code Architecture - A biological approach to software organization with self-healing capabilities"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "BioCode Team", email = "team@biocode.dev"}
]
maintainers = [
    {name = "Umit Kacar", email = "umitkacar@example.com"}
]
keywords = [
    "self-healing",
    "biological-architecture", 
    "framework",
    "asyncio",
    "code-organization"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Framework :: AsyncIO",
]

dependencies = [
    "pyjwt>=2.8.0"
]

[project.optional-dependencies]
metrics = [
    "prometheus-client>=0.19.0",
    "psutil>=5.9.6"
]
dashboard = [
    "aiohttp>=3.9.1",
    "matplotlib>=3.8.2",
    "pandas>=2.1.4"
]
distributed = [
    "redis>=5.0.1",
    "aiocache>=0.12.2"
]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.23.2",
    "black>=23.12.1",
    "mypy>=1.8.0",
    "ruff>=0.1.9",
    "coverage>=7.3.4",
    "pre-commit>=3.5.0"
]
all = [
    "biocode[metrics,dashboard,distributed]"
]

[project.urls]
"Homepage" = "https://github.com/umitkacar/biocode"
"Bug Reports" = "https://github.com/umitkacar/biocode/issues"
"Source" = "https://github.com/umitkacar/biocode"
"Documentation" = "https://github.com/umitkacar/biocode#readme"

[tool.setuptools]
package-dir = {"" = "."}
packages = ["src", "src.core", "src.components", "src.monitoring", "src.security"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
select = ["E", "F", "I", "N", "W"]
ignore = ["E501"]
fixable = ["ALL"]
unfixable = []
target-version = "py38"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
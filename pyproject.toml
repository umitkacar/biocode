[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "biocode-swarm-intelligence"
version = "0.2.0"
description = "BioCode Swarm Intelligence - Autonomous Problem-Solving Framework with biological architecture"
authors = ["Umit Kacar, PhD <[Contact information to be provided]>"]
maintainers = ["Umit Kacar, PhD <[Contact information to be provided]>"]
readme = "README.md"
repository = "https://github.com/umitkacar/biocode-swarm-intelligence"
documentation = "https://biocode.readthedocs.io"
license = "Proprietary"
keywords = [
    "swarm-intelligence",
    "autonomous-agents",
    "problem-solving",
    "biological-computing", 
    "self-healing",
    "colony-intelligence",
    "adaptive-systems",
    "domain-driven-design",
    "asyncio"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: AsyncIO",
    "Operating System :: OS Independent",
]
packages = [
    { include = "biocode", from = "src" },
    { include = "evolution_lab", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.11"
# Core dependencies
pydantic = "^2.5.0"
pydantic-settings = "^2.0.0"
asyncio = "^3.4.3"
numpy = "^1.24.0"
structlog = "^24.1.0"
pyjwt = "^2.8.0"

# API dependencies
fastapi = {version = "^0.109.0", optional = true}
uvicorn = {extras = ["standard"], version = "^0.27.0", optional = true}
prometheus-fastapi-instrumentator = {version = "^6.1.0", optional = true}

# CLI dependencies
typer = {version = "^0.9.0", optional = true}
rich = {version = "^13.7.0", optional = true}

# Dashboard dependencies
aiohttp = {version = "^3.9.1", optional = true}
matplotlib = {version = "^3.8.2", optional = true}
pandas = {version = "^2.1.4", optional = true}

# Infrastructure dependencies
redis = {version = "^5.0.1", optional = true}
sqlalchemy = {version = "^2.0.25", optional = true}
alembic = {version = "^1.13.1", optional = true}
grpcio = {version = "^1.60.0", optional = true}
celery = {version = "^5.3.6", optional = true}
aiocache = {version = "^0.12.2", optional = true}

# Monitoring dependencies
prometheus-client = {version = "^0.19.0", optional = true}
psutil = {version = "^5.9.6", optional = true}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^24.1.0"
ruff = "^0.1.14"
mypy = "^1.8.0"
isort = "^5.13.2"
pre-commit = "^3.6.0"
ipython = "^8.20.0"
notebook = "^7.0.7"
httpx = "^0.26.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.4"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
mkdocs-mermaid2-plugin = "^1.1.1"

[tool.poetry.extras]
# Feature sets
api = ["fastapi", "uvicorn", "prometheus-fastapi-instrumentator"]
cli = ["typer", "rich"]
dashboard = ["aiohttp", "matplotlib", "pandas"]
sql = ["sqlalchemy", "alembic"]
redis = ["redis", "aiocache"]
grpc = ["grpcio"]
celery = ["celery"]
monitoring = ["prometheus-client", "psutil"]

# Convenience groups
web = ["fastapi", "uvicorn", "prometheus-fastapi-instrumentator", "aiohttp"]
distributed = ["redis", "aiocache", "celery", "grpcio"]
all = [
    "fastapi", "uvicorn", "prometheus-fastapi-instrumentator",
    "typer", "rich",
    "aiohttp", "matplotlib", "pandas",
    "sqlalchemy", "alembic",
    "redis", "aiocache",
    "grpcio",
    "celery",
    "prometheus-client", "psutil"
]

[tool.poetry.scripts]
biocode = "biocode.interfaces.cli.main:app"
biocode-api = "biocode.interfaces.api.main:run"
biocode-migrate = "biocode.infrastructure.persistence.database.migrations:run"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",  # flake8-bandit
    "BLE", # flake8-blind-except
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # Pylint
    "TRY", # tryceratops
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ANN101", # missing type annotation for self
    "ANN102", # missing type annotation for cls
    "ANN401", # dynamically typed expressions (Any)
    "S101",  # use of assert detected
    "PLR0913", # too many arguments
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ANN", "D"]
"src/biocode/interfaces/api/*" = ["B008"]
"src/biocode/domain/entities/*" = ["PLR0913"]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    -ra -q 
    --strict-markers 
    --asyncio-mode=auto 
    --cov=src/biocode 
    --cov-report=term-missing 
    --cov-report=html 
    --cov-report=xml
"""
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"